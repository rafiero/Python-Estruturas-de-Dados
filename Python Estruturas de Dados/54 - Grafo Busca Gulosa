{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"54 - Grafo Busca Gulosa","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOaSXS8MnSRJKUREoY7Uv9/"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aT5XntK8AWlW"},"source":["#Grafos\r\n","\r\n"]},{"cell_type":"code","metadata":{"id":"CuCqs8EL9ZT8","executionInfo":{"status":"ok","timestamp":1609190165433,"user_tz":180,"elapsed":1217,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}}},"source":["class vertice:\r\n","  def __init__(self, rotulo, distancia_objetivo):\r\n","    self.rotulo = rotulo\r\n","    self.visitado = False\r\n","    self.distancia_objetivo = distancia_objetivo\r\n","    self.adjacentes = []\r\n","\r\n","  def add_adjacente(self, adjancente):\r\n","    self.adjacentes.append(adjancente)\r\n","\r\n","  def mostra_adjacentes(self):\r\n","    for i in self.adjacentes:\r\n","      print(i.vertice.rotulo, i.custo)"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"DKDMfeltG426","executionInfo":{"status":"ok","timestamp":1609190167024,"user_tz":180,"elapsed":2800,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}}},"source":["class adjacente:\r\n","  def __init__(self, vertice, custo):\r\n","    self.vertice = vertice\r\n","    self.custo = custo\r\n"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZUM-ipjDBdZG","executionInfo":{"status":"ok","timestamp":1609190167025,"user_tz":180,"elapsed":2797,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}}},"source":["class grafo:\r\n","  arad = vertice('Arad', 366)\r\n","  zerind = vertice('Zerind', 374)\r\n","  oradea = vertice('Oradea', 380)\r\n","  sibiu = vertice('Sibiu', 253)\r\n","  timissoara = vertice('Timissoara', 329)\r\n","  lugoj = vertice('Lugoj', 244)\r\n","  mehadia = vertice('Mehadia', 241)\r\n","  dobreta = vertice('Dobreta', 242)\r\n","  craiova = vertice('Craiova', 160)\r\n","  rimnicu = vertice('Rimnicu', 193)\r\n","  fagaras = vertice('Fagaras', 178)\r\n","  pitesti = vertice('Pitesti', 98)\r\n","  bucharest = vertice('Bucharest', 0)\r\n","  giurgiu = vertice('Giurgiu', 77)\r\n","\r\n","  arad.add_adjacente(adjacente(zerind, 75))\r\n","  arad.add_adjacente(adjacente(sibiu, 140))\r\n","  arad.add_adjacente(adjacente(timissoara, 118))\r\n","\r\n","  zerind.add_adjacente(adjacente(arad, 75))\r\n","  zerind.add_adjacente(adjacente(oradea, 71))\r\n","\r\n","  oradea.add_adjacente(adjacente(zerind, 71))\r\n","  oradea.add_adjacente(adjacente(sibiu, 151))\r\n","\r\n","  sibiu.add_adjacente(adjacente(oradea, 151))\r\n","  sibiu.add_adjacente(adjacente(arad, 140))\r\n","  sibiu.add_adjacente(adjacente(fagaras, 99))\r\n","  sibiu.add_adjacente(adjacente(rimnicu, 80))\r\n","\r\n","  timissoara.add_adjacente(adjacente(arad, 118))\r\n","  timissoara.add_adjacente(adjacente(lugoj, 111))\r\n","\r\n","  lugoj.add_adjacente(adjacente(timissoara, 111))\r\n","  lugoj.add_adjacente(adjacente(mehadia, 70))\r\n","\r\n","  mehadia.add_adjacente(adjacente(lugoj, 70))\r\n","  mehadia.add_adjacente(adjacente(dobreta, 75))\r\n","\r\n","  dobreta.add_adjacente(adjacente(mehadia, 75))\r\n","  dobreta.add_adjacente(adjacente(craiova, 120))\r\n","\r\n","  craiova.add_adjacente(adjacente(dobreta, 120))\r\n","  craiova.add_adjacente(adjacente(pitesti, 138))\r\n","  craiova.add_adjacente(adjacente(rimnicu, 146))\r\n","\r\n","  rimnicu.add_adjacente(adjacente(craiova, 146))\r\n","  rimnicu.add_adjacente(adjacente(sibiu, 80))\r\n","  rimnicu.add_adjacente(adjacente(pitesti, 97))\r\n","\r\n","  fagaras.add_adjacente(adjacente(sibiu, 99))\r\n","  fagaras.add_adjacente(adjacente(bucharest, 211))\r\n","\r\n","  pitesti.add_adjacente(adjacente(rimnicu, 97))\r\n","  pitesti.add_adjacente(adjacente(craiova, 138))\r\n","  pitesti.add_adjacente(adjacente(bucharest, 101))\r\n","\r\n","  bucharest.add_adjacente(adjacente(fagaras, 211))\r\n","  bucharest.add_adjacente(adjacente(pitesti, 101))\r\n","  bucharest.add_adjacente(adjacente(giurgiu, 90))"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"2oNsqqV_G6cq","executionInfo":{"status":"ok","timestamp":1609190167026,"user_tz":180,"elapsed":2794,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}}},"source":["grafo = grafo()"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-LI6WR7dTQR2"},"source":["#Busca Gulosa\r\n","\r\n","Busca relacionada ao tracar rotas\r\n","\r\n","Relacionada a IA\r\n","\r\n","Heuristica: Determinada informacao que voce possui sobre o problema. Cada tipo de problema tem uma heuristica, nesse caso para ir de Arad a Bucharest, nesse casa, nossa heuristica, eh a a distancia em linha reta de cada uma das cidades ate Buscharest\r\n","\r\n","Neste caso vamos usar uma tabela de distancia em linha reta de cada um das cidades ate Bucharest, e vamos adicionar em um novo atributo no vertice"]},{"cell_type":"markdown","metadata":{"id":"aIjre2EzLXB0"},"source":["## Vetor ordenado"]},{"cell_type":"code","metadata":{"id":"bHnGlmCQLYoH","executionInfo":{"status":"ok","timestamp":1609190167026,"user_tz":180,"elapsed":2791,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}}},"source":["import numpy as np\n","class VetorOrdenado:\n","  \n","  def __init__(self, capacidade):\n","    self.capacidade = capacidade\n","    self.ultima_posicao = -1\n","    # Mudança no tipo de dados\n","    self.valores = np.empty(self.capacidade, dtype=object)\n","\n","  # Referência para o vértice e comparação com a distância para o objetivo\n","  def insere(self, vertice):\n","    if self.ultima_posicao == self.capacidade - 1:\n","      print('Capacidade máxima atingida')\n","      return\n","    posicao = 0\n","    for i in range(self.ultima_posicao + 1):\n","      posicao = i\n","      if self.valores[i].distancia_objetivo > vertice.distancia_objetivo:\n","        break\n","      if i == self.ultima_posicao:\n","        posicao = i + 1\n","    x = self.ultima_posicao\n","    while x >= posicao:\n","      self.valores[x + 1] = self.valores[x]\n","      x -= 1\n","    self.valores[posicao] = vertice\n","    self.ultima_posicao += 1\n","\n","  def imprime(self):\n","    if self.ultima_posicao == -1:\n","      print('O vetor está vazio')\n","    else:\n","      for i in range(self.ultima_posicao + 1):\n","        print(i, ' - ', self.valores[i].rotulo, ' - ', self.valores[i].distancia_objetivo)  "],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"y52ZwyIA6plv","executionInfo":{"status":"ok","timestamp":1609190167027,"user_tz":180,"elapsed":2788,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}}},"source":["vetor = VetorOrdenado(5)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"TeuX4AD_7orT","executionInfo":{"status":"ok","timestamp":1609190167027,"user_tz":180,"elapsed":2785,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}}},"source":["class BuscaGulosa:\r\n","  def __init__(self, objetivo):\r\n","    self.objetivo = objetivo\r\n","    self.encontrado = False\r\n","\r\n","  def buscar(self, atual):\r\n","    print('-------------')\r\n","    print('Atual {}'.format(atual.rotulo))\r\n","    atual.visitado = True\r\n","\r\n","    if atual == self.objetivo:\r\n","      self.encontrado = True\r\n","    else:\r\n","      vetor_ordenado = VetorOrdenado(len(atual.adjacentes))\r\n","      for adjacente in atual.adjacentes:\r\n","        if adjacente.vertice.visitado == False:\r\n","          adjacente.visitado = True\r\n","          vetor_ordenado.insere(adjacente.vertice)\r\n","      vetor_ordenado.imprime()\r\n","\r\n","      if vetor_ordenado.valores[0] != None:\r\n","        self.buscar(vetor_ordenado.valores[0])\r\n","\r\n"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_eWRYGit-PIg","executionInfo":{"status":"ok","timestamp":1609190167028,"user_tz":180,"elapsed":2782,"user":{"displayName":"Rafael Mendes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRZR8gdYO3GKAarcdp6-zXpph5n4uMUwhVa_TM=s64","userId":"16393729804263682346"}},"outputId":"4ab8037b-6644-492d-b999-7ab9ef360de2"},"source":["busca_gulosa = BuscaGulosa(grafo.bucharest)\r\n","busca_gulosa.buscar(grafo.arad)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["-------------\n","Atual Arad\n","0  -  Sibiu  -  253\n","1  -  Timissoara  -  329\n","2  -  Zerind  -  374\n","-------------\n","Atual Sibiu\n","0  -  Fagaras  -  178\n","1  -  Rimnicu  -  193\n","2  -  Oradea  -  380\n","-------------\n","Atual Fagaras\n","0  -  Bucharest  -  0\n","-------------\n","Atual Bucharest\n"],"name":"stdout"}]}]}